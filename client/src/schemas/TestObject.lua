-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Data

local flatbuffers = require('flatbuffers')

local TestObject = {} -- the module
local TestObject_mt = {} -- the class metatable

function TestObject.New()
    local o = {}
    setmetatable(o, {__index = TestObject_mt})
    return o
end
function TestObject.GetRootAsTestObject(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TestObject.New()
    o:Init(buf, n + offset)
    return o
end
function TestObject_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function TestObject_mt:Message()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function TestObject_mt:Facing()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 0
end
function TestObject.Start(builder) builder:StartObject(2) end
function TestObject.AddMessage(builder, message) builder:PrependUOffsetTRelativeSlot(0, message, 0) end
function TestObject.AddFacing(builder, facing) builder:PrependInt8Slot(1, facing, 0) end
function TestObject.End(builder) return builder:EndObject() end

return TestObject -- return the module